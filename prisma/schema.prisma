generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email    String    @unique
  fullName String
  password String
  phone    String    @default("+38(000)000-00-00")
  role     UserRole  @default(USER)
  verified DateTime?

  provider   String?
  providerId String?

  cart             Cart[]
  orders           Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String
  imageUrl String

  items ProductItem[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  ingredients   Ingredient[] @relation(fields: [ingredientIds], references: [id])
  ingredientIds String[]     @default([]) @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredientId Int?
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  products Product[]
}

model Ingredient {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String @unique
  price    Int
  imageUrl String

  products    Product[]  @relation(fields: [productIds], references: [id])
  productIds  String[]   @default([]) @db.ObjectId
  cartItems   CartItem[] @relation(fields: [cartItemIds], references: [id])
  cartItemIds String[]   @default([]) @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  price     Int
  size      Int?
  pizzaType Int?

  cartItems CartItem[]

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  items   CartItem[]
  itemIds String[]   @default([]) @db.ObjectId

  token String?

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId String      @db.ObjectId

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String @db.ObjectId

  quantity Int @default(1)

  ingredients   Ingredient[] @relation(fields: [ingredientIds], references: [id])
  ingredientIds String[]     @default([]) @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
